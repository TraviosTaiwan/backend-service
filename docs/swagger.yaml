definitions:
  models.Role:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      permissions:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/models.Role'
      role_id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  types.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  types.Category:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  types.Customer:
    properties:
      address:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      platform:
        type: string
      username:
        type: string
    type: object
  types.Item:
    properties:
      buying_price:
        type: integer
      category_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      name:
        type: string
      quantity:
        type: integer
      selling_price:
        type: integer
      vendor_id:
        type: integer
    type: object
  types.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  types.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  types.SaleOrder:
    properties:
      customer_id:
        type: integer
      grand_total:
        type: integer
      id:
        type: integer
      sub_total:
        type: integer
    type: object
  types.SaleOrderItem:
    properties:
      id:
        type: integer
      item_id:
        type: integer
      quantity:
        type: integer
      sale_order_id:
        type: integer
    type: object
  types.Vendor:
    properties:
      address:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
    type: object
info:
  contact: {}
paths:
  /category:
    get:
      description: Get a list of categories or a specific category by ID
      parameters:
      - description: Category ID
        in: query
        name: categoryID
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Category'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category with the provided details
      parameters:
      - description: Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/types.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.Category'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create a new category
      tags:
      - categories
  /category/{categoryID}:
    delete:
      description: Delete a category by ID
      parameters:
      - description: Category ID
        in: path
        name: categoryID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category deleted successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Category not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete a category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update a category with the provided details
      parameters:
      - description: Category ID
        in: path
        name: categoryID
        required: true
        type: integer
      - description: Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/types.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Category'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update a category
      tags:
      - categories
  /customer:
    get:
      description: Get a list of customers or a specific customer by ID
      parameters:
      - description: Customer ID
        in: query
        name: customerID
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Customer'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get customers
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Create a new customer with the provided details
      parameters:
      - description: Customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/types.Customer'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.Customer'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create a new customer
      tags:
      - customers
  /customer/{customerID}:
    delete:
      description: Delete an customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: customerID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Customer deleted successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Customer not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete an customer
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: Update an customer with the provided details
      parameters:
      - description: Customer ID
        in: path
        name: customerID
        required: true
        type: integer
      - description: Customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/types.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Customer'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update an customer
      tags:
      - customers
  /item:
    get:
      description: Get a list of items or a specific item by ID
      parameters:
      - description: Item ID
        in: query
        name: itemID
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Item'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get items
      tags:
      - items
    post:
      consumes:
      - application/json
      description: Create a new item with the provided details
      parameters:
      - description: Item
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/types.Item'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.Item'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create a new item
      tags:
      - items
  /item/{itemID}:
    delete:
      description: Delete an item by ID
      parameters:
      - description: Item ID
        in: path
        name: itemID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Item deleted successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Item not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete an item
      tags:
      - items
    put:
      consumes:
      - application/json
      description: Update an item with the provided details
      parameters:
      - description: Item ID
        in: path
        name: itemID
        required: true
        type: integer
      - description: Item
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/types.Item'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Item'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update an item
      tags:
      - items
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return JWT token
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/types.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.AuthResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
      summary: Login user
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user and return JWT token
      parameters:
      - description: User Registration Details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.AuthResponse'
        "400":
          description: Invalid request
          schema:
            type: string
      summary: Register new user
      tags:
      - auth
  /sale_order:
    get:
      description: Get a list of sale orders or a specific sale order by ID
      parameters:
      - description: Sale Order ID
        in: query
        name: sale_orderID
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.SaleOrder'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get sale orders
      tags:
      - sale_orders
    post:
      consumes:
      - application/json
      description: Create a new sale order with the provided details
      parameters:
      - description: Sale Order
        in: body
        name: sale_order
        required: true
        schema:
          $ref: '#/definitions/types.SaleOrder'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.SaleOrder'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create a new sale order
      tags:
      - sale_orders
  /sale_order/{sale_orderID}:
    delete:
      description: Delete an sale order by ID
      parameters:
      - description: Sale Order ID
        in: path
        name: sale_orderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Sale Order deleted successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Sale Order not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete an sale order
      tags:
      - sale_orders
    put:
      consumes:
      - application/json
      description: Update an sale order with the provided details
      parameters:
      - description: Sale Order ID
        in: path
        name: sale_orderID
        required: true
        type: integer
      - description: Sale Order
        in: body
        name: sale_order
        required: true
        schema:
          $ref: '#/definitions/types.SaleOrder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SaleOrder'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update an sale order
      tags:
      - sale_orders
  /sale_order_item:
    get:
      description: Get a list of sale order items or a specific sale order item by
        ID
      parameters:
      - description: Sale Order Item ID
        in: query
        name: sale_order_itemID
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.SaleOrderItem'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get sale order items
      tags:
      - sale_order_items
    post:
      consumes:
      - application/json
      description: Create a new sale order item with the provided details
      parameters:
      - description: Sale Order Item
        in: body
        name: sale_order_item
        required: true
        schema:
          $ref: '#/definitions/types.SaleOrderItem'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.SaleOrderItem'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create a new sale order item
      tags:
      - sale_order_items
  /sale_order_item/{sale_order_itemID}:
    delete:
      description: Delete an sale order item by ID
      parameters:
      - description: Sale Order Item ID
        in: path
        name: sale_order_itemID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Sale Order Item deleted successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Sale Order Item not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete an sale order item
      tags:
      - sale_order_items
    put:
      consumes:
      - application/json
      description: Update an sale order item with the provided details
      parameters:
      - description: Sale Order Item ID
        in: path
        name: sale_order_itemID
        required: true
        type: integer
      - description: Sale Order Item
        in: body
        name: sale_order_item
        required: true
        schema:
          $ref: '#/definitions/types.SaleOrderItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SaleOrderItem'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update an sale order item
      tags:
      - sale_order_items
  /vendor:
    get:
      description: Get a list of vendors or a specific vendor by ID
      parameters:
      - description: Vendor ID
        in: query
        name: vendorID
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Vendor'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get vendors
      tags:
      - vendors
    post:
      consumes:
      - application/json
      description: Create a new vendor with the provided details
      parameters:
      - description: Vendor
        in: body
        name: vendor
        required: true
        schema:
          $ref: '#/definitions/types.Vendor'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.Vendor'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create a new vendor
      tags:
      - vendors
  /vendor/{vendorID}:
    delete:
      description: Delete a vendor by ID
      parameters:
      - description: Vendor ID
        in: path
        name: vendorID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Vendor deleted successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Vendor not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete a vendor
      tags:
      - vendors
    put:
      consumes:
      - application/json
      description: Update a vendor with the provided details
      parameters:
      - description: Vendor ID
        in: path
        name: vendorID
        required: true
        type: integer
      - description: Vendor
        in: body
        name: vendor
        required: true
        schema:
          $ref: '#/definitions/types.Vendor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Vendor'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update a vendor
      tags:
      - vendors
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
